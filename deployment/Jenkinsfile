def label = "petclinic-vets-${UUID.randomUUID().toString()}


podTemplate(label: label, 
	containers: [
	  containerTemplate(name: 'maven', image: 'maven:3.3.9-jdk-8-alpine', ttyEnabled: true, command: 'cat'),
	  containerTemplate(name: 'docker', image: 'docker:stable', ttyEnabled: true, command: 'cat'),
	  containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.8.0', command: 'cat', ttyEnabled: true)
	],
	volumes: [hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock')]
	) {
	
	node(label) {
	try {
		
	  
	  stage('Get Source') {
		git "https://github.com/yonwon01/petclinic_vets.git"
	  }

	  def props = readProperties  file:'deployment/pipeline.properties'
	  def tag = props['version']
	  def gitSrc = props['gitSrc']
	  def dockerRegistry = props['dockerRegistry']
	  def image = props['image']
	  def deployment = props['deployment']
	  def service = props['service']
	  def app = props['app']
	  def tier = props['tier']
	  def namespace = props['namespace']

	    
	  stage('Build Maven project') {
		container('maven') {
			sh "mvn -B clean package"
		}
	  }
		
	 /* stage('Inspection Code') {
		container('maven') {
			sh "mvn sonar:sonar \
  -Dsonar.host.url=http://169.56.74.7:32090 \
  -Dsonar.login=da97e0439d7b6a3834fb0d3a295c1b84630a369f"
		}
	  }*/
	  
	  stage('Build Docker image') {
		container('docker') {
		  docker.withRegistry("${dockerRegistry}", 'registry-credentials') {
			sh "docker build . -t ${image}"
			sh "docker push ${image}"
			//sh "docker tag ${image}:${tag} ${image}:latest"
			//sh "docker push ${image}:latest"
		  }
		}
	  }
	  stage( 'Clean Up Existing Deployments' ) {
		container('kubectl') {
		  withCredentials([[$class: 'UsernamePasswordMultiBinding',
							  credentialsId: 'registry-credentials',
							  usernameVariable: 'DOCKER_HUB_USER',
							  passwordVariable: 'DOCKER_HUB_PASSWORD']]) {
			  
			  sh "kubectl delete deployments -n ${namespace} --selector=app=${app},tier=${tier}"
		  }
		}
	  }
	  stage( 'Deploy to Cluster' ) {
		container('kubectl') {
		  withCredentials([[$class: 'UsernamePasswordMultiBinding',
							  credentialsId: 'registry-credentials',
							  usernameVariable: 'DOCKER_HUB_USER',
							  passwordVariable: 'DOCKER_HUB_PASSWORD']]) {
			  
			  sh "kubectl apply -n ${namespace} -f ${deployment}"
			  sh "sleep 5"
			  sh "kubectl apply -n ${namespace} -f ${service}"
		  }
		}
	  }
		
	 //notifySuccessful()
	  } catch(e) {
        currentBuild.result = "FAILED"
        //notifyFailed()
    }
    
  }
}

